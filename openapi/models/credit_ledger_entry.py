# coding: utf-8

"""
    Vayu API

    The Vayu API is a RESTful API that allows you to submit events for processing and storage & manage billing related entities.           The API is secured using the Bearer Authentication scheme with JWT tokens.           To obtain a JWT token, please contact Vayu at team@withvayu.com

    The version of the OpenAPI document: 1.0.0
    Contact: dev@withvayu.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi.models.billing_cycle_status import BillingCycleStatus
from openapi.models.integration_entity import IntegrationEntity
from typing import Optional, Set
from typing_extensions import Self

class CreditLedgerEntry(BaseModel):
    """
    CreditLedgerEntry
    """ # noqa: E501
    id: Annotated[str, Field(strict=True)]
    created_at: datetime = Field(alias="createdAt")
    type: BillingCycleStatus
    amount: Union[StrictFloat, StrictInt]
    balance_after_entry: Union[StrictFloat, StrictInt] = Field(alias="balanceAfterEntry")
    invoice_id: Optional[StrictStr] = Field(default=None, alias="invoiceId")
    erp_id: Optional[StrictStr] = Field(default=None, alias="erpId")
    contract_id: Optional[StrictStr] = Field(default=None, alias="contractId")
    integration_entities: List[IntegrationEntity] = Field(alias="integrationEntities")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "createdAt", "type", "amount", "balanceAfterEntry", "invoiceId", "erpId", "contractId", "integrationEntities"]

    @field_validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[0-9a-fA-F]{24}$", value):
            raise ValueError(r"must validate the regular expression /^[0-9a-fA-F]{24}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreditLedgerEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in integration_entities (list)
        _items = []
        if self.integration_entities:
            for _item_integration_entities in self.integration_entities:
                if _item_integration_entities:
                    _items.append(_item_integration_entities.to_dict())
            _dict['integrationEntities'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreditLedgerEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "createdAt": obj.get("createdAt"),
            "type": obj.get("type"),
            "amount": obj.get("amount"),
            "balanceAfterEntry": obj.get("balanceAfterEntry"),
            "invoiceId": obj.get("invoiceId"),
            "erpId": obj.get("erpId"),
            "contractId": obj.get("contractId"),
            "integrationEntities": [IntegrationEntity.from_dict(_item) for _item in obj["integrationEntities"]] if obj.get("integrationEntities") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


