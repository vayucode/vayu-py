# coding: utf-8

"""
    Vayu API

    The Vayu API is a RESTful API that allows you to submit events for processing and storage & manage billing related entities.           The API is secured using the Bearer Authentication scheme with JWT tokens.           To obtain a JWT token, please contact Vayu at team@withvayu.com

    The version of the OpenAPI document: 1.0.0
    Contact: dev@withvayu.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi.models.net_suite_sync_invoices_request_data_entity import NetSuiteSyncInvoicesRequestDataEntity
from openapi.models.net_suite_sync_invoices_request_data_item import NetSuiteSyncInvoicesRequestDataItem
from typing import Optional, Set
from typing_extensions import Self

class NetSuiteSyncInvoicesRequestData(BaseModel):
    """
    NetSuiteSyncInvoicesRequestData
    """ # noqa: E501
    start_date: datetime = Field(alias="startDate")
    end_date: datetime = Field(alias="endDate")
    tran_date: datetime = Field(alias="tranDate")
    memo: StrictStr
    external_id: Annotated[str, Field(strict=True)] = Field(alias="externalId")
    entity: NetSuiteSyncInvoicesRequestDataEntity
    account: Optional[NetSuiteSyncInvoicesRequestDataEntity] = None
    item: NetSuiteSyncInvoicesRequestDataItem
    discount_item: Optional[NetSuiteSyncInvoicesRequestDataEntity] = Field(default=None, alias="discountItem")
    discount_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="discountRate")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["startDate", "endDate", "tranDate", "memo", "externalId", "entity", "account", "item", "discountItem", "discountRate"]

    @field_validator('external_id')
    def external_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[0-9a-fA-F]{24}$", value):
            raise ValueError(r"must validate the regular expression /^[0-9a-fA-F]{24}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetSuiteSyncInvoicesRequestData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of entity
        if self.entity:
            _dict['entity'] = self.entity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of account
        if self.account:
            _dict['account'] = self.account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of item
        if self.item:
            _dict['item'] = self.item.to_dict()
        # override the default output from pydantic by calling `to_dict()` of discount_item
        if self.discount_item:
            _dict['discountItem'] = self.discount_item.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetSuiteSyncInvoicesRequestData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "startDate": obj.get("startDate"),
            "endDate": obj.get("endDate"),
            "tranDate": obj.get("tranDate"),
            "memo": obj.get("memo"),
            "externalId": obj.get("externalId"),
            "entity": NetSuiteSyncInvoicesRequestDataEntity.from_dict(obj["entity"]) if obj.get("entity") is not None else None,
            "account": NetSuiteSyncInvoicesRequestDataEntity.from_dict(obj["account"]) if obj.get("account") is not None else None,
            "item": NetSuiteSyncInvoicesRequestDataItem.from_dict(obj["item"]) if obj.get("item") is not None else None,
            "discountItem": NetSuiteSyncInvoicesRequestDataEntity.from_dict(obj["discountItem"]) if obj.get("discountItem") is not None else None,
            "discountRate": obj.get("discountRate")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


