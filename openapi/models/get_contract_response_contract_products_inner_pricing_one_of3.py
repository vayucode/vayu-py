# coding: utf-8

"""
    Vayu API

    The Vayu API is a RESTful API that allows you to submit events for processing and storage & manage billing related entities.           The API is secured using the Bearer Authentication scheme with JWT tokens.           To obtain a JWT token, please contact Vayu at team@withvayu.com

    The version of the OpenAPI document: 1.0.0
    Contact: dev@withvayu.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi.models.get_contract_response_contract_products_inner_pricing_one_of3_subscription_cadence import GetContractResponseContractProductsInnerPricingOneOf3SubscriptionCadence
from openapi.models.get_contract_response_contract_products_inner_pricing_one_of3_tiers_inner import GetContractResponseContractProductsInnerPricingOneOf3TiersInner
from typing import Optional, Set
from typing_extensions import Self

class GetContractResponseContractProductsInnerPricingOneOf3(BaseModel):
    """
    GetContractResponseContractProductsInnerPricingOneOf3
    """ # noqa: E501
    type: StrictStr
    tiers: List[GetContractResponseContractProductsInnerPricingOneOf3TiersInner]
    subscription_cadence: Optional[GetContractResponseContractProductsInnerPricingOneOf3SubscriptionCadence] = Field(default=None, alias="subscriptionCadence")
    auto_upgrade: Optional[StrictBool] = Field(default=None, alias="autoUpgrade")
    prorate: Optional[StrictBool] = None
    is_rev_share: Optional[StrictBool] = Field(default=None, alias="isRevShare")
    base_amount: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, alias="baseAmount")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["type", "tiers", "subscriptionCadence", "autoUpgrade", "prorate", "isRevShare", "baseAmount"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['TIERED']):
            raise ValueError("must be one of enum values ('TIERED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetContractResponseContractProductsInnerPricingOneOf3 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tiers (list)
        _items = []
        if self.tiers:
            for _item_tiers in self.tiers:
                if _item_tiers:
                    _items.append(_item_tiers.to_dict())
            _dict['tiers'] = _items
        # override the default output from pydantic by calling `to_dict()` of subscription_cadence
        if self.subscription_cadence:
            _dict['subscriptionCadence'] = self.subscription_cadence.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if subscription_cadence (nullable) is None
        # and model_fields_set contains the field
        if self.subscription_cadence is None and "subscription_cadence" in self.model_fields_set:
            _dict['subscriptionCadence'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetContractResponseContractProductsInnerPricingOneOf3 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "tiers": [GetContractResponseContractProductsInnerPricingOneOf3TiersInner.from_dict(_item) for _item in obj["tiers"]] if obj.get("tiers") is not None else None,
            "subscriptionCadence": GetContractResponseContractProductsInnerPricingOneOf3SubscriptionCadence.from_dict(obj["subscriptionCadence"]) if obj.get("subscriptionCadence") is not None else None,
            "autoUpgrade": obj.get("autoUpgrade"),
            "prorate": obj.get("prorate"),
            "isRevShare": obj.get("isRevShare"),
            "baseAmount": obj.get("baseAmount")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


