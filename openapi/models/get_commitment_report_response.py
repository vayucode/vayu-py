# coding: utf-8

"""
    Vayu API

    The Vayu API is a RESTful API that allows you to submit events for processing and storage & manage billing related entities.           The API is secured using the Bearer Authentication scheme with JWT tokens.           To obtain a JWT token, please contact Vayu at team@withvayu.com

    The version of the OpenAPI document: 1.0.0
    Contact: dev@withvayu.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi.models.contract_status import ContractStatus
from openapi.models.currency import Currency
from typing import Optional, Set
from typing_extensions import Self

class GetCommitmentReportResponse(BaseModel):
    """
    GetCommitmentReportResponse
    """ # noqa: E501
    contract_status: ContractStatus = Field(alias="contractStatus")
    customer_name: StrictStr = Field(alias="customerName")
    start_date: datetime = Field(alias="startDate")
    end_date: datetime = Field(alias="endDate")
    contract_start_date: datetime = Field(alias="contractStartDate")
    days_to_contract_end: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="daysToContractEnd")
    product_variant_name: StrictStr = Field(alias="productVariantName")
    commitment_consumption_currency_amount: Union[StrictFloat, StrictInt] = Field(alias="commitmentConsumptionCurrencyAmount")
    commitment_consumption_units_amount: Union[StrictFloat, StrictInt] = Field(alias="commitmentConsumptionUnitsAmount")
    commitment_consumption_percentage: Union[StrictFloat, StrictInt] = Field(alias="commitmentConsumptionPercentage")
    total_commitment_currency_amount: Union[StrictFloat, StrictInt] = Field(alias="totalCommitmentCurrencyAmount")
    total_commitment_units_amount: Union[StrictFloat, StrictInt] = Field(alias="totalCommitmentUnitsAmount")
    commercial_terms_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="commercialTermsAmount")
    erp_id: Optional[StrictStr] = Field(default=None, alias="erpId")
    currency: Currency
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["contractStatus", "customerName", "startDate", "endDate", "contractStartDate", "daysToContractEnd", "productVariantName", "commitmentConsumptionCurrencyAmount", "commitmentConsumptionUnitsAmount", "commitmentConsumptionPercentage", "totalCommitmentCurrencyAmount", "totalCommitmentUnitsAmount", "commercialTermsAmount", "erpId", "currency"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetCommitmentReportResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetCommitmentReportResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contractStatus": obj.get("contractStatus"),
            "customerName": obj.get("customerName"),
            "startDate": obj.get("startDate"),
            "endDate": obj.get("endDate"),
            "contractStartDate": obj.get("contractStartDate"),
            "daysToContractEnd": obj.get("daysToContractEnd"),
            "productVariantName": obj.get("productVariantName"),
            "commitmentConsumptionCurrencyAmount": obj.get("commitmentConsumptionCurrencyAmount"),
            "commitmentConsumptionUnitsAmount": obj.get("commitmentConsumptionUnitsAmount"),
            "commitmentConsumptionPercentage": obj.get("commitmentConsumptionPercentage"),
            "totalCommitmentCurrencyAmount": obj.get("totalCommitmentCurrencyAmount"),
            "totalCommitmentUnitsAmount": obj.get("totalCommitmentUnitsAmount"),
            "commercialTermsAmount": obj.get("commercialTermsAmount"),
            "erpId": obj.get("erpId"),
            "currency": obj.get("currency")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


