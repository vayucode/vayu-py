# coding: utf-8

"""
    Vayu API

    The Vayu API is a RESTful API that allows you to submit events for processing and storage & manage billing related entities.           The API is secured using the Bearer Authentication scheme with JWT tokens.           To obtain a JWT token, please contact Vayu at team@withvayu.com

    The version of the OpenAPI document: 1.0.0
    Contact: dev@withvayu.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from openapi.models.get_contract_response_contract_products_inner_pricing_one_of import GetContractResponseContractProductsInnerPricingOneOf
from openapi.models.get_contract_response_contract_products_inner_pricing_one_of1 import GetContractResponseContractProductsInnerPricingOneOf1
from openapi.models.get_contract_response_contract_products_inner_pricing_one_of2 import GetContractResponseContractProductsInnerPricingOneOf2
from openapi.models.get_contract_response_contract_products_inner_pricing_one_of3 import GetContractResponseContractProductsInnerPricingOneOf3
from openapi.models.get_contract_response_contract_products_inner_pricing_one_of4 import GetContractResponseContractProductsInnerPricingOneOf4
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

GETCONTRACTRESPONSECONTRACTPRODUCTSINNERPRICING_ONE_OF_SCHEMAS = ["GetContractResponseContractProductsInnerPricingOneOf", "GetContractResponseContractProductsInnerPricingOneOf1", "GetContractResponseContractProductsInnerPricingOneOf2", "GetContractResponseContractProductsInnerPricingOneOf3", "GetContractResponseContractProductsInnerPricingOneOf4"]

class GetContractResponseContractProductsInnerPricing(BaseModel):
    """
    GetContractResponseContractProductsInnerPricing
    """
    # data type: GetContractResponseContractProductsInnerPricingOneOf
    oneof_schema_1_validator: Optional[GetContractResponseContractProductsInnerPricingOneOf] = None
    # data type: GetContractResponseContractProductsInnerPricingOneOf1
    oneof_schema_2_validator: Optional[GetContractResponseContractProductsInnerPricingOneOf1] = None
    # data type: GetContractResponseContractProductsInnerPricingOneOf2
    oneof_schema_3_validator: Optional[GetContractResponseContractProductsInnerPricingOneOf2] = None
    # data type: GetContractResponseContractProductsInnerPricingOneOf3
    oneof_schema_4_validator: Optional[GetContractResponseContractProductsInnerPricingOneOf3] = None
    # data type: GetContractResponseContractProductsInnerPricingOneOf4
    oneof_schema_5_validator: Optional[GetContractResponseContractProductsInnerPricingOneOf4] = None
    actual_instance: Optional[Union[GetContractResponseContractProductsInnerPricingOneOf, GetContractResponseContractProductsInnerPricingOneOf1, GetContractResponseContractProductsInnerPricingOneOf2, GetContractResponseContractProductsInnerPricingOneOf3, GetContractResponseContractProductsInnerPricingOneOf4]] = None
    one_of_schemas: Set[str] = { "GetContractResponseContractProductsInnerPricingOneOf", "GetContractResponseContractProductsInnerPricingOneOf1", "GetContractResponseContractProductsInnerPricingOneOf2", "GetContractResponseContractProductsInnerPricingOneOf3", "GetContractResponseContractProductsInnerPricingOneOf4" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = GetContractResponseContractProductsInnerPricing.model_construct()
        error_messages = []
        match = 0
        # validate data type: GetContractResponseContractProductsInnerPricingOneOf
        if not isinstance(v, GetContractResponseContractProductsInnerPricingOneOf):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetContractResponseContractProductsInnerPricingOneOf`")
        else:
            match += 1
        # validate data type: GetContractResponseContractProductsInnerPricingOneOf1
        if not isinstance(v, GetContractResponseContractProductsInnerPricingOneOf1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetContractResponseContractProductsInnerPricingOneOf1`")
        else:
            match += 1
        # validate data type: GetContractResponseContractProductsInnerPricingOneOf2
        if not isinstance(v, GetContractResponseContractProductsInnerPricingOneOf2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetContractResponseContractProductsInnerPricingOneOf2`")
        else:
            match += 1
        # validate data type: GetContractResponseContractProductsInnerPricingOneOf3
        if not isinstance(v, GetContractResponseContractProductsInnerPricingOneOf3):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetContractResponseContractProductsInnerPricingOneOf3`")
        else:
            match += 1
        # validate data type: GetContractResponseContractProductsInnerPricingOneOf4
        if not isinstance(v, GetContractResponseContractProductsInnerPricingOneOf4):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetContractResponseContractProductsInnerPricingOneOf4`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in GetContractResponseContractProductsInnerPricing with oneOf schemas: GetContractResponseContractProductsInnerPricingOneOf, GetContractResponseContractProductsInnerPricingOneOf1, GetContractResponseContractProductsInnerPricingOneOf2, GetContractResponseContractProductsInnerPricingOneOf3, GetContractResponseContractProductsInnerPricingOneOf4. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in GetContractResponseContractProductsInnerPricing with oneOf schemas: GetContractResponseContractProductsInnerPricingOneOf, GetContractResponseContractProductsInnerPricingOneOf1, GetContractResponseContractProductsInnerPricingOneOf2, GetContractResponseContractProductsInnerPricingOneOf3, GetContractResponseContractProductsInnerPricingOneOf4. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into GetContractResponseContractProductsInnerPricingOneOf
        try:
            instance.actual_instance = GetContractResponseContractProductsInnerPricingOneOf.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetContractResponseContractProductsInnerPricingOneOf1
        try:
            instance.actual_instance = GetContractResponseContractProductsInnerPricingOneOf1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetContractResponseContractProductsInnerPricingOneOf2
        try:
            instance.actual_instance = GetContractResponseContractProductsInnerPricingOneOf2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetContractResponseContractProductsInnerPricingOneOf3
        try:
            instance.actual_instance = GetContractResponseContractProductsInnerPricingOneOf3.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetContractResponseContractProductsInnerPricingOneOf4
        try:
            instance.actual_instance = GetContractResponseContractProductsInnerPricingOneOf4.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into GetContractResponseContractProductsInnerPricing with oneOf schemas: GetContractResponseContractProductsInnerPricingOneOf, GetContractResponseContractProductsInnerPricingOneOf1, GetContractResponseContractProductsInnerPricingOneOf2, GetContractResponseContractProductsInnerPricingOneOf3, GetContractResponseContractProductsInnerPricingOneOf4. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into GetContractResponseContractProductsInnerPricing with oneOf schemas: GetContractResponseContractProductsInnerPricingOneOf, GetContractResponseContractProductsInnerPricingOneOf1, GetContractResponseContractProductsInnerPricingOneOf2, GetContractResponseContractProductsInnerPricingOneOf3, GetContractResponseContractProductsInnerPricingOneOf4. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], GetContractResponseContractProductsInnerPricingOneOf, GetContractResponseContractProductsInnerPricingOneOf1, GetContractResponseContractProductsInnerPricingOneOf2, GetContractResponseContractProductsInnerPricingOneOf3, GetContractResponseContractProductsInnerPricingOneOf4]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


